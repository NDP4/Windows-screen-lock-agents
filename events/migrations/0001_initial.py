# Generated by Django 5.2.6 on 2025-09-13 17:29

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('devices', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('event_type', models.CharField(choices=[('device_registered', 'Device Registered'), ('device_online', 'Device Online'), ('device_offline', 'Device Offline'), ('heartbeat', 'Heartbeat'), ('lock_auto', 'Auto Lock'), ('lock_manual', 'Manual Lock'), ('lock_forced', 'Forced Lock'), ('unlock_attempt', 'Unlock Attempt'), ('unlock_success', 'Unlock Success'), ('unlock_failed', 'Unlock Failed'), ('unlock_blocked', 'Unlock Blocked'), ('multiple_failed_attempts', 'Multiple Failed Attempts'), ('security_violation', 'Security Violation'), ('suspicious_activity', 'Suspicious Activity'), ('policy_updated', 'Policy Updated'), ('agent_updated', 'Agent Updated'), ('config_changed', 'Configuration Changed'), ('admin_login', 'Admin Login'), ('admin_logout', 'Admin Logout'), ('admin_action', 'Admin Action')], help_text='Type of event', max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Event timestamp')),
                ('severity', models.CharField(choices=[('info', 'Information'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical')], default='info', help_text='Event severity level', max_length=20)),
                ('message', models.TextField(help_text='Event message/description')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional event data')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address where event originated', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string (for web events)')),
                ('source', models.CharField(default='agent', help_text='Event source (agent, dashboard, api)', max_length=50)),
                ('device', models.ForeignKey(blank=True, help_text='Device associated with event', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='devices.device')),
                ('user', models.ForeignKey(blank=True, help_text='User associated with event', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'db_table': 'events',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SecurityIncident',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('incident_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('incident_type', models.CharField(choices=[('multiple_failed_unlocks', 'Multiple Failed Unlock Attempts'), ('unauthorized_access', 'Unauthorized Access Attempt'), ('policy_violation', 'Policy Violation'), ('agent_tampering', 'Agent Tampering Detected'), ('suspicious_activity', 'Suspicious Activity'), ('device_compromise', 'Potential Device Compromise')], max_length=50)),
                ('status', models.CharField(choices=[('open', 'Open'), ('investigating', 'Investigating'), ('resolved', 'Resolved'), ('false_positive', 'False Positive')], default='open', max_length=20)),
                ('severity', models.CharField(choices=[('info', 'Information'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical')], default='warning', max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_incidents', to=settings.AUTH_USER_MODEL)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='security_incidents', to='devices.device')),
                ('related_events', models.ManyToManyField(blank=True, related_name='security_incidents', to='events.event')),
                ('reported_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reported_incidents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Security Incident',
                'verbose_name_plural': 'Security Incidents',
                'db_table': 'security_incidents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UnlockAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attempted_username', models.CharField(help_text='Username used in unlock attempt', max_length=150)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('result', models.CharField(choices=[('success', 'Success'), ('failed_password', 'Failed - Wrong Password'), ('failed_user', 'Failed - Invalid User'), ('failed_blocked', 'Failed - Account Blocked'), ('failed_timeout', 'Failed - Timeout'), ('failed_other', 'Failed - Other')], help_text='Attempt result', max_length=20)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('duration_seconds', models.IntegerField(blank=True, help_text='Time taken for unlock attempt', null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional attempt data')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unlock_attempts', to='devices.device')),
                ('unlock_user', models.ForeignKey(blank=True, help_text='User who successfully unlocked (if success)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='unlock_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Unlock Attempt',
                'verbose_name_plural': 'Unlock Attempts',
                'db_table': 'unlock_attempts',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='DeviceHeartbeat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(default='online', max_length=20)),
                ('is_locked', models.BooleanField(default=False)),
                ('cpu_usage', models.FloatField(blank=True, null=True)),
                ('memory_usage', models.FloatField(blank=True, null=True)),
                ('disk_usage', models.FloatField(blank=True, null=True)),
                ('agent_version', models.CharField(blank=True, max_length=50)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='heartbeats', to='devices.device')),
            ],
            options={
                'verbose_name': 'Device Heartbeat',
                'verbose_name_plural': 'Device Heartbeats',
                'db_table': 'device_heartbeats',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['device', '-timestamp'], name='device_hear_device__6028a4_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['event_type', '-timestamp'], name='events_event_t_55886d_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['device', '-timestamp'], name='events_device__87f0ab_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['user', '-timestamp'], name='events_user_id_e5338a_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['severity', '-timestamp'], name='events_severit_7548c6_idx'),
        ),
        migrations.AddIndex(
            model_name='unlockattempt',
            index=models.Index(fields=['device', '-timestamp'], name='unlock_atte_device__dce349_idx'),
        ),
        migrations.AddIndex(
            model_name='unlockattempt',
            index=models.Index(fields=['result', '-timestamp'], name='unlock_atte_result_cc5a48_idx'),
        ),
        migrations.AddIndex(
            model_name='unlockattempt',
            index=models.Index(fields=['attempted_username', '-timestamp'], name='unlock_atte_attempt_1f25c2_idx'),
        ),
    ]
