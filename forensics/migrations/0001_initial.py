# Generated by Django 5.2.6 on 2025-09-13 17:29

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('devices', '0001_initial'),
        ('events', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DataRetentionPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_type', models.CharField(choices=[('screenshots', 'Screenshots'), ('logs', 'Log Files'), ('evidence', 'Forensic Evidence'), ('events', 'Event Data'), ('audit_logs', 'Audit Logs')], max_length=20, unique=True)),
                ('retention_days', models.IntegerField(help_text='Number of days to retain data')),
                ('auto_delete', models.BooleanField(default=False, help_text='Automatically delete expired data')),
                ('encrypt_data', models.BooleanField(default=True, help_text='Encrypt stored data')),
                ('backup_before_delete', models.BooleanField(default=True, help_text='Create backup before deletion')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Data Retention Policy',
                'verbose_name_plural': 'Data Retention Policies',
                'db_table': 'data_retention_policies',
            },
        ),
        migrations.CreateModel(
            name='ForensicEvidence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evidence_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('evidence_type', models.CharField(choices=[('screenshot', 'Screenshot'), ('log_file', 'Log File'), ('network_capture', 'Network Capture'), ('memory_dump', 'Memory Dump'), ('file_system', 'File System Evidence'), ('registry', 'Windows Registry'), ('event_log', 'Windows Event Log'), ('other', 'Other')], help_text='Type of evidence', max_length=20)),
                ('file_path', models.FileField(blank=True, help_text='Evidence file', null=True, upload_to='evidence/%Y/%m/%d/')),
                ('file_hash', models.CharField(help_text='SHA256 hash of the evidence file', max_length=64)),
                ('file_size', models.BigIntegerField(default=0, help_text='File size in bytes')),
                ('collected_at', models.DateTimeField(auto_now_add=True, help_text='When evidence was collected')),
                ('chain_of_custody', models.TextField(help_text='Chain of custody information')),
                ('description', models.TextField(help_text='Description of the evidence')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional evidence metadata')),
                ('is_encrypted', models.BooleanField(default=True, help_text='Whether the evidence is encrypted')),
                ('retention_until', models.DateTimeField(blank=True, help_text='When this evidence should be deleted', null=True)),
                ('collected_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collected_evidence', to=settings.AUTH_USER_MODEL)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forensic_evidence', to='devices.device')),
                ('incident', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='forensic_evidence', to='events.securityincident')),
            ],
            options={
                'verbose_name': 'Forensic Evidence',
                'verbose_name_plural': 'Forensic Evidence',
                'db_table': 'forensic_evidence',
                'ordering': ['-collected_at'],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('log_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('action', models.CharField(choices=[('user_login', 'User Login'), ('user_logout', 'User Logout'), ('user_created', 'User Created'), ('user_updated', 'User Updated'), ('user_deleted', 'User Deleted'), ('password_changed', 'Password Changed'), ('device_registered', 'Device Registered'), ('device_updated', 'Device Updated'), ('device_deleted', 'Device Deleted'), ('device_locked', 'Device Locked'), ('device_unlocked', 'Device Unlocked'), ('device_force_lock', 'Device Force Locked'), ('policy_created', 'Policy Created'), ('policy_updated', 'Policy Updated'), ('policy_deleted', 'Policy Deleted'), ('policy_assigned', 'Policy Assigned'), ('policy_unassigned', 'Policy Unassigned'), ('screenshot_taken', 'Screenshot Taken'), ('incident_created', 'Security Incident Created'), ('incident_resolved', 'Security Incident Resolved'), ('access_denied', 'Access Denied'), ('config_changed', 'Configuration Changed'), ('backup_created', 'Backup Created'), ('system_maintenance', 'System Maintenance')], help_text='Action performed', max_length=50)),
                ('target', models.CharField(help_text='Target of the action (device, user, policy, etc.)', max_length=255)),
                ('target_id', models.CharField(blank=True, help_text='ID of the target object', max_length=100)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the action was performed')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the actor', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string')),
                ('details', models.JSONField(blank=True, default=dict, help_text='Additional details about the action')),
                ('before_value', models.JSONField(blank=True, help_text='Value before the change (for updates)', null=True)),
                ('after_value', models.JSONField(blank=True, help_text='Value after the change (for updates)', null=True)),
                ('success', models.BooleanField(default=True, help_text='Whether the action was successful')),
                ('error_message', models.TextField(blank=True, help_text='Error message if action failed')),
                ('actor_user', models.ForeignKey(blank=True, help_text='User who performed the action', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Audit Log',
                'verbose_name_plural': 'Audit Logs',
                'db_table': 'audit_logs',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['actor_user', '-timestamp'], name='audit_logs_actor_u_868240_idx'), models.Index(fields=['action', '-timestamp'], name='audit_logs_action_f48619_idx'), models.Index(fields=['target', '-timestamp'], name='audit_logs_target_86e89b_idx')],
            },
        ),
        migrations.CreateModel(
            name='Screenshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('screenshot_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('image_file', models.ImageField(help_text='Screenshot image file', upload_to='screenshots/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['png', 'jpg', 'jpeg'])])),
                ('thumbnail', models.ImageField(blank=True, help_text='Thumbnail image', null=True, upload_to='screenshots/thumbs/%Y/%m/%d/')),
                ('file_hash', models.CharField(help_text='SHA256 hash of the image file', max_length=64)),
                ('file_size', models.BigIntegerField(help_text='File size in bytes')),
                ('is_encrypted', models.BooleanField(default=False, help_text='Whether the file is encrypted')),
                ('taken_at', models.DateTimeField(auto_now_add=True, help_text='When screenshot was taken')),
                ('screen_resolution', models.CharField(blank=True, help_text='Screen resolution when taken', max_length=20)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional screenshot metadata')),
                ('retention_until', models.DateTimeField(blank=True, help_text='When this screenshot should be deleted', null=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='screenshots', to='devices.device')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='screenshots', to='events.event')),
                ('taken_by_user', models.ForeignKey(blank=True, help_text='User who triggered the screenshot', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='taken_screenshots', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Screenshot',
                'verbose_name_plural': 'Screenshots',
                'db_table': 'screenshots',
                'ordering': ['-taken_at'],
                'indexes': [models.Index(fields=['device', '-taken_at'], name='screenshots_device__471e2b_idx'), models.Index(fields=['event', '-taken_at'], name='screenshots_event_i_3bc0ce_idx')],
            },
        ),
    ]
