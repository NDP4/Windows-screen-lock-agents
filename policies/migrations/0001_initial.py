# Generated by Django 5.2.6 on 2025-09-13 17:29

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('devices', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Policy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Policy name', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Policy description')),
                ('scope', models.CharField(choices=[('global', 'Global'), ('group', 'Device Group'), ('device', 'Individual Device')], default='global', help_text='Policy application scope', max_length=20)),
                ('idle_timeout_seconds', models.IntegerField(default=300, help_text='Idle timeout before auto-lock (seconds)', validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(86400)])),
                ('manual_lock_enabled', models.BooleanField(default=True, help_text='Allow manual lock via hotkey')),
                ('lock_hotkey', models.CharField(default='Win+Alt+S', help_text='Hotkey combination for manual lock', max_length=50)),
                ('require_password', models.BooleanField(default=True, help_text='Require password for unlock')),
                ('allow_windows_auth', models.BooleanField(default=False, help_text='Allow Windows authentication for unlock')),
                ('max_unlock_attempts', models.IntegerField(default=3, help_text='Maximum unlock attempts before lockout', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('lockout_duration_minutes', models.IntegerField(default=15, help_text='Lockout duration after max attempts (minutes)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1440)])),
                ('wallpaper_image', models.ImageField(blank=True, help_text='Lock screen wallpaper', null=True, upload_to='wallpapers/')),
                ('lock_message', models.TextField(default='This computer is locked. Please contact IT support if you need assistance.', help_text='Message displayed on lock screen')),
                ('show_clock', models.BooleanField(default=True, help_text='Show clock on lock screen')),
                ('show_company_logo', models.BooleanField(default=True, help_text='Show company logo on lock screen')),
                ('enable_screenshot', models.BooleanField(default=False, help_text='Take screenshot on unlock (privacy sensitive)')),
                ('enable_activity_logging', models.BooleanField(default=True, help_text='Log device activity')),
                ('log_retention_days', models.IntegerField(default=90, help_text='Log retention period (days)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(365)])),
                ('heartbeat_interval_seconds', models.IntegerField(default=60, help_text='Heartbeat interval (seconds)', validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(3600)])),
                ('offline_mode_enabled', models.BooleanField(default=True, help_text='Allow agent to work offline')),
                ('auto_update_enabled', models.BooleanField(default=True, help_text='Enable automatic agent updates')),
                ('is_active', models.BooleanField(default=True, help_text='Whether policy is active')),
                ('priority', models.IntegerField(default=0, help_text='Policy priority (higher number = higher priority)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_policies', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Policy',
                'verbose_name_plural': 'Policies',
                'db_table': 'policies',
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PolicyTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('template_type', models.CharField(choices=[('basic', 'Basic Security'), ('high_security', 'High Security'), ('developer', 'Developer Friendly'), ('kiosk', 'Kiosk Mode'), ('custom', 'Custom')], default='custom', max_length=20)),
                ('description', models.TextField()),
                ('policy_data', models.JSONField(help_text='Policy configuration as JSON')),
                ('is_system_template', models.BooleanField(default=False, help_text='System-provided template (cannot be deleted)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Policy Template',
                'verbose_name_plural': 'Policy Templates',
                'db_table': 'policy_templates',
            },
        ),
        migrations.CreateModel(
            name='PolicyAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('assigned_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='policy_assignments', to=settings.AUTH_USER_MODEL)),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='policy_assignments', to='devices.device')),
                ('device_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='policy_assignments', to='devices.devicegroup')),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='policies.policy')),
            ],
            options={
                'verbose_name': 'Policy Assignment',
                'verbose_name_plural': 'Policy Assignments',
                'db_table': 'policy_assignments',
                'unique_together': {('policy', 'device'), ('policy', 'device_group')},
            },
        ),
    ]
